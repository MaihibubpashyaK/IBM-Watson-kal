Run an ESP8266/Arduino as a IBM Watson IoT Platform managed device
Reference:https://developer.ibm.com/recipes/tutorials/connect-an-arduino-uno-device-to-the-ibm-internet-of-things-foundation/
           https://developer.ibm.com/recipes/tutorials/run-an-esp8266arduino-as-a-iot-foundation-managed-device/


Ingredients
An ESP8266
Step-by-step
What is a

Being a managed device in the IBM Watson IoT Platform adds powerful capabilities to remotely manage the device and 
do such things as remote updates, reboots, and perform diagnostics. This recipe shows you how to get started with configuring an
ESP8266/Arduino as a managed device.
First you'll need an ESP8266

There are a variety of types to choose from, all of them should work, here i'm using a NodeMCU style board which is easy to
prototype with because it has USB support built in for programming and powering the ESP8266.

Next, install the Arduino IDE

Get the Arduino IDE here. Using a recent version of the IDE 1.6.5 or later makes it easy to add the ESP8266 support to the IDE.
With the Arduino IDE installed use the Board Manager function to add support for the ESP8266, see here for how to do that.
https://github.com/esp8266/Arduino#installing-with-boards-manager
Add the MQTT PubSubClient library

The IBM Watson IoT Platform uses the MQTT protocol so next add the MQTT PubSubClient library to the Arduino IDE. This needs to be a 
recent version of the library to work with the ESP8266, i'm using version 2.3, from here.
(You can import a library zip to the Arduino IDE from the IDE menu option Sketch -> Include Library -> Add .ZIP Library)
Add the ArduinoJson library

The IBM Watson IoT Platform uses Json formatted messages so it makes the Arduino code simpler to use a Json parsing library,
I've used ArduinoJson, so add that to the Arduino IDE. I've used version 5.0.7 but any recent version of the library should work.
Find it here: https://github.com/bblanchon/ArduinoJson/releases/tag/v5.0.7
(You can import a library zip to the Arduino IDE from the IDE menu option Sketch -> Include Library -> Add .ZIP Library)
Signup to Bluemix and the IBM Watson IoT Platform

Next you need to signup on the IBM Watson IoT Platform and create an “organization” and a “device”. This is described in detail 
at the IBM website and involves signing up to Bluemix and the Internet of Things Platform and in the Bluemix Catalog add an Internet 
of Things Service. This will create your Organization and then in the IoT Dashboard you can add a Device. There are lots of
configuration options, nearly all can be left blank, you just need a device type, i used “ESP8266”, and a device ID, i used “Test1”.
When the device has been created you'll see the Device Credentials page and you need to save those details which are used to 
customise your Arduino sketch in the next step.

The Arduino Sketch

Copy the following sketch to the Arduino IDE:
/**
 IBM IoT Foundation managed Device

 Author: Ant Elder
 License: Apache License v2
*/
#include <ESP8266WiFi.h>
#include <PubSubClient.h> // https://github.com/knolleary/pubsubclient/releases/tag/v2.3
#include <ArduinoJson.h> // https://github.com/bblanchon/ArduinoJson/releases/tag/v5.0.7

//-------- Customise these values -----------
const char* ssid = "<yourWiFiSSID>";
const char* password = "<yourWiFiPassword>";

#define ORG "<yourOrg>"
#define DEVICE_TYPE "yourDeviceType"
#define DEVICE_ID "yourDevice"
#define TOKEN "yourDeviceToken"
//-------- Customise the above values --------

char server[] = ORG ".messaging.internetofthings.ibmcloud.com";
char authMethod[] = "use-token-auth";
char token[] = TOKEN;
char clientId[] = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;

const char publishTopic[] = "iot-2/evt/status/fmt/json";
const char responseTopic[] = "iotdm-1/response";
const char manageTopic[] = "iotdevice-1/mgmt/manage";
const char updateTopic[] = "iotdm-1/device/update";
const char rebootTopic[] = "iotdm-1/mgmt/initiate/device/reboot";

void callback(char* topic, byte* payload, unsigned int payloadLength);

WiFiClient wifiClient;
PubSubClient client(server, 1883, callback, wifiClient);

int publishInterval = 30000; // 30 seconds
long lastPublishMillis;

void setup() {
 Serial.begin(115200); Serial.println();

 wifiConnect();
 mqttConnect();
 initManagedDevice();
}

void loop() {
 if (millis() - lastPublishMillis > publishInterval) {
   publishData();
   lastPublishMillis = millis();
 }

 if (!client.loop()) {
   mqttConnect();
   initManagedDevice();
 }
}

void wifiConnect() {
 Serial.print("Connecting to "); Serial.print(ssid);
 WiFi.begin(ssid, password);
 while (WiFi.status() != WL_CONNECTED) {
   delay(500);
   Serial.print(".");
 }
 Serial.print("nWiFi connected, IP address: "); Serial.println(WiFi.localIP());
}

void mqttConnect() {
 if (!!!client.connected()) {
   Serial.print("Reconnecting MQTT client to "); Serial.println(server);
   while (!!!client.connect(clientId, authMethod, token)) {
     Serial.print(".");
     delay(500);
   }
   Serial.println();
 }
}

void initManagedDevice() {
 if (client.subscribe("iotdm-1/response")) {
   Serial.println("subscribe to responses OK");
 } else {
   Serial.println("subscribe to responses FAILED");
 }

 if (client.subscribe(rebootTopic)) {
   Serial.println("subscribe to reboot OK");
 } else {
   Serial.println("subscribe to reboot FAILED");
 }

 if (client.subscribe("iotdm-1/device/update")) {
   Serial.println("subscribe to update OK");
 } else {
   Serial.println("subscribe to update FAILED");
 }

 StaticJsonBuffer<300> jsonBuffer;
 JsonObject& root = jsonBuffer.createObject();
 JsonObject& d = root.createNestedObject("d");
 JsonObject& metadata = d.createNestedObject("metadata");
 metadata["publishInterval"] = publishInterval;
 JsonObject& supports = d.createNestedObject("supports");
 supports["deviceActions"] = true;

 char buff[300];
 root.printTo(buff, sizeof(buff));
 Serial.println("publishing device metadata:"); Serial.println(buff);
 if (client.publish(manageTopic, buff)) {
   Serial.println("device Publish ok");
 } else {
   Serial.print("device Publish failed:");
 }
}

void publishData() {
 String payload = "{\"d\":{\"counter\":";
 payload += millis() / 1000;
 payload += "}}";

 Serial.print("Sending payload: "); Serial.println(payload);

 if (client.publish(publishTopic, (char*) payload.c_str())) {
   Serial.println("Publish OK");
 } else {
   Serial.println("Publish FAILED");
 }
}

void callback(char* topic, byte* payload, unsigned int payloadLength) {
 Serial.print("callback invoked for topic: "); Serial.println(topic);

 if (strcmp (responseTopic, topic) == 0) {
   return; // just print of response for now
 }

 if (strcmp (rebootTopic, topic) == 0) {
   Serial.println("Rebooting...");
   ESP.restart();
 }

 if (strcmp (updateTopic, topic) == 0) {
   handleUpdate(payload);
 }
}

void handleUpdate(byte* payload) {
 StaticJsonBuffer<300> jsonBuffer;
 JsonObject& root = jsonBuffer.parseObject((char*)payload);
 if (!root.success()) {
   Serial.println("handleUpdate: payload parse FAILED");
   return;
 }
 Serial.println("handleUpdate payload:"); root.prettyPrintTo(Serial); Serial.println();

 JsonObject& d = root["d"];
 JsonArray& fields = d["fields"];
 for (JsonArray::iterator it = fields.begin(); it != fields.end(); ++it) {
   JsonObject& field = *it;
   const char* fieldName = field["field"];
   if (strcmp (fieldName, "metadata") == 0) {
     JsonObject& fieldValue = field["value"];
     if (fieldValue.containsKey("publishInterval")) {
       publishInterval = fieldValue["publishInterval"];
       Serial.print("publishInterval:"); Serial.println(publishInterval);
     }
   }
 }
}
 
Customise the lines after “//——– Customise these values ———–” with your WiFi network SSID and password and with the IoT Device 
Credentials from the previous step.
Upload and run the sketch

Upload the sketch to you ESP8266 and then open the Serial Monitor and you should see it register as amanaged device and start 
publishing data every 30 seconds.

 
View the published data on the IBM Watson IoT Platform Dashboard

You can see the published events and data from your device on the IoT Dashboard by navigating to your devices and clicking on 
the device:
 

Reconfigure the device from the IBM Watson IoT Platform Dashboard

You can open the device configuration from the IoT Dashboard by browsing your devices and clicking on the device, or by going to 
this URL: https://<yourORG>.internetofthings.ibmcloud.com/dashboard/#/devices/browse/drilldown/<yourDeviceType>/<yourDeviceId>
Scroll down to the Metadata section and you should see the metadata Json sent from the Arduino:

Type over the publishInterval value to change it to 10000 and click the Confirm Changes button and you should see in the Arduino 
Serial Monitor the update request and the Arduino start publishing data every 10 seconds:

 
Back at the IoT and scroll right to the bottom of the device view to the Action section and it should be showing a Reboot button,

click that Reboot and you will see in the Arduino Serial Monitor the ESP8266 restarting:

 
 
Thats it!

Hope you found this a useful introduction to using the ESP8266/Arduino as an IBM Watson IoT Platform's managed device.
You can find more information about the device management API's in the IBM Watson IoT Platform documentation 
at: https://docs.internetofthings.ibmcloud.com/#/device-management-operations#device-management-operations
Share this:
TAGS ARDUINO, ESP8266, IOT, IOTF, JSON, MANAGED


